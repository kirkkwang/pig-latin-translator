{"version":3,"sources":["assets/piggy.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","myPigLatinCodeHere","userInput","state","phrase","split","console","log","translatedWords","map","currentWord","vowelsArray","filter","vowel","word","caseFix","toLowerCase","toUpperCase","substring","caseFixQu","caseFixConsQu","caseFixY","indexOf","indexOfFirstVowel","punc","match","slice","index","length","qu","restOfWord","consonantAndQu","consonants","join","setState","phraseTranslated","restartGame","setUpPreventDefault","e","preventDefault","handleInput","target","value","src","piggy","alt","className","type","onChange","this","onClick","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dce296f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/piggy.854c53ef.png\";","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport piggy from \"./assets/piggy.png\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // the state object holds information that can be displayed to the user and updated throughout the program\n    this.state = {\n      // \"phrase\" is the text entered by the user - right now there are test words hard coded to make the process of testing your code faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"Hello, world!!!\",\n      // \"phraseTranslated\" is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the \"submit\" button\n      phraseTranslated: \"This is where your translated sentence will appear.\",\n    };\n  }\n\n  // The \"myPigLatinCodeHere\" function is where you will put your logic to convert the sentence entered by the user to Pig Latin\n\n  myPigLatinCodeHere = () => {\n    // the variable \"userInput\" will contain the text input from the user modified into an array of words\n    // no need to change this variable\n    let userInput = this.state.phrase.split(\" \");\n    console.log(\"userInput:\", userInput);\n\n    // now that we have an array of words, we can map over the array and access each word\n    let translatedWordsArray = userInput.map((currentWord) => {\n      // ACTION ITEM: use \"currentWord\" as a starting point for your code\n      console.log(\"currentWord:\", currentWord);\n\n      let vowelsArray = currentWord.split(\"\").filter((vowel) => {\n        return (\n          vowel === \"a\" ||\n          vowel === \"e\" ||\n          vowel === \"i\" ||\n          vowel === \"o\" ||\n          vowel === \"u\" ||\n          vowel === \"A\" ||\n          vowel === \"E\" ||\n          vowel === \"I\" ||\n          vowel === \"O\" ||\n          vowel === \"U\"\n        );\n      });\n      console.log(\"vowelsArray:\", vowelsArray);\n      // your code here!\n      // if indexOfFirstVowel !== 0\n      // if indexOfFirstVowel === 0\n      //   add 'way' to the end of string eg. apple -> appleway\n      // else if substring(0,1) === qu then, slice qu and append to the end and add 'ay'\n      // else if vowelsArray.length === 0 AND there is a y if current.indexOf('y')\n      // handle punctuations and capitals eg. Hello, world! -> Ellohay, orldway!\n      const caseFix = (word) => {\n        // false means it is uppercase, true means it is lowercase\n        return word[0] == word[0].toLowerCase()\n          ? word\n          : word[0].toLowerCase() + word[1].toUpperCase() + word.substring(2);\n      };\n\n      const caseFixQu = (word) => {\n        return word[0] == word[0].toLowerCase()\n          ? word\n          : word.substring(0, 2).toLowerCase() +\n              word[2].toUpperCase() +\n              word.substring(3);\n      };\n\n      const caseFixConsQu = (word) => {\n        return word[0] == word[0].toLowerCase()\n          ? word\n          : word.substring(0, 2).toLowerCase() +\n              word[2] +\n              word[3].toUpperCase() +\n              word.substring(4);\n      };\n\n      const caseFixY = (word) => {\n        return word[0] == word[0].toLowerCase()\n          ? word\n          : word.substring(0, word.indexOf(\"y\")).toLowerCase() +\n              word[word.indexOf(\"y\")].toUpperCase() +\n              word.substring(word.indexOf(\"y\") + 1);\n      };\n\n      const puncCheck = (word) => {\n        if (word.match(/[.,:!?;]/)) {\n          return word.slice(word.match(/[.,:!?;]/).index);\n        } else {\n          return \"\";\n        }\n      };\n\n      let indexOfFirstVowel = currentWord.indexOf(vowelsArray[0]);\n      let punc = puncCheck(currentWord);\n      if (indexOfFirstVowel === 0) {\n        return (\n          currentWord.slice(0, currentWord.length - punc.length) + \"way\" + punc\n        );\n      } else if (currentWord.slice(0, 2).toLowerCase() === \"qu\") {\n        let qu = caseFixQu(currentWord).substring(0, 2);\n        let restOfWord = caseFixQu(currentWord).substring(2);\n        return (\n          restOfWord.slice(0, restOfWord.length - punc.length) +\n          qu +\n          \"ay\" +\n          punc\n        );\n      } else if (currentWord.slice(1, 3) === \"qu\") {\n        let consonantAndQu = caseFixConsQu(currentWord).substring(0, 3);\n        let restOfWord = caseFixConsQu(currentWord).substring(3);\n        return (\n          restOfWord.slice(0, restOfWord.length - punc.length) +\n          consonantAndQu +\n          \"ay\" +\n          punc\n        );\n      } else if (vowelsArray.length === 0 && currentWord.indexOf(\"y\") !== -1) {\n        let consonants = caseFixY(currentWord).substring(\n          0,\n          currentWord.indexOf(\"y\")\n        );\n        let restOfWord = caseFixY(currentWord).substring(\n          currentWord.indexOf(\"y\")\n        );\n        return (\n          restOfWord.slice(0, restOfWord.length - punc.length) +\n          consonants +\n          \"ay\" +\n          punc\n        );\n      } else {\n        let consonants = caseFix(currentWord).substring(0, indexOfFirstVowel);\n        let restOfWord = caseFix(currentWord).substring(indexOfFirstVowel);\n        return (\n          restOfWord.slice(0, restOfWord.length - punc.length) +\n          consonants +\n          \"ay\" +\n          punc\n        );\n      }\n      //Input Hello, World! --> Ello,hay Orld!way -->Ellohay, Orldway!\n      //if there is a puncuation, ,.?!:;\n      // Move to end of the word\n      // Remember: console.log is your friend :)\n      // ACTION ITEM: change the value of currentWord to the name of whatever variable you made containing your Pig Latin'd word\n    });\n\n    // joining the array back to a string of translated words\n    // no need to change this variable\n    let translatedWords = translatedWordsArray.join(\" \");\n    console.log(\"translatedWords:\", translatedWords);\n\n    // the setState method will take your information from \"translatedWords\" and update the state object that is displayed to the user\n    // no need to change this method\n    this.setState({ phraseTranslated: translatedWords });\n  };\n\n  restartGame = () => {\n    // this method restarts the game by setting the original state\n    // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n    this.setState({\n      phrase: \"alpha through yummy squeal queen fry\",\n      phraseTranslated: \"This is where your translated sentence will appear.\",\n    });\n  };\n\n  // no need to modify this method\n  setUpPreventDefault = (e) => {\n    // this method prevents React from refreshing the page unnecessarily\n    e.preventDefault();\n    this.myPigLatinCodeHere();\n  };\n\n  // no need to modify this method\n  handleInput = (e) => {\n    // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n    this.setState({ phrase: e.target.value });\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Pig Latin Translator</h1>\n        <img\n          src={piggy}\n          alt=\"pig with butcher cut names in pig latin\"\n          className=\"piggy\"\n        />\n        <div className=\"inputArea\">\n          <h4>Enter phrase to be translated:</h4>\n          {/* user input field - every DOM event that happens in the input will call the handleChange method and update state */}\n          <input\n            type=\"text\"\n            className=\"userInput\"\n            onChange={this.handleInput}\n            value={this.state.phrase}\n          />\n          <br />\n          {/* button that called the setUpPreventDefault method which calls the myPigLatinCodeHere method */}\n          <button onClick={this.setUpPreventDefault}>Translate</button>\n          <button onClick={this.restartGame}>Clear</button>\n        </div>\n        <h4>{this.state.phraseTranslated}</h4>\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// air -> airway, oil -> oilway, ardvaark -> ardvaarkway\n// chair -> airchay, wreck -> eckwray, leg -> eglay, treat -> eattray (DONE)\n// quarter -> arterquay, quokka -> okkaquay, quoting -> otingquay\n// yellow -> ellowyay, sky -> yskay, ybarra -> barrayay\n\n//\n// if string[0] at value 0 and 1, if that === qu\n\n// use toLowerCase when moving char to the back\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}